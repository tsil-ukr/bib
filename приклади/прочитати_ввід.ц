взяти визначення турбо;
взяти визначення Друк;

дія обробник_вводу(турбіна: адреса<турбо::Турбіна>, аргумент: невідома_адреса, скасовано: логічне, розмір_префікса: позитивне, дані_префікса: памʼять<п8>, розмір: позитивне, дані: памʼять<п8>) {
  якщо скасовано {
    біб::надрукувати_ю8(ю8"скасовано");
  } інакше {
    біб::надрукувати_ю8(ю8 { розмір, дані });
    біб::звільнити_памʼять(турбіна.виділяч, дані);

    турбо::прочитати_ввід_ю8(турбіна, обробник_вводу, пусто, ю8 { розмір_префікса, дані_префікса });
  }
}

дія обробник_відкладеного(турбіна: адреса<турбо::Турбіна>, відкладене: адреса<турбо::Відкладене>, аргумент: невідома_адреса, скасовано: логічне, успішно: логічне, код_помилки: ц32) {
  якщо скасовано {
    турбо::вивести_ю8(турбіна, ю8"скасовано\n");
  } інакше якщо успішно {
    турбо::вивести_ю8(турбіна, ю8"готово!\n");
  } інакше {
    турбо::вивести_ю8(турбіна, ю8"відкладене не вдалось\n");
  }
}

дія старт(): ц32 {
  ціль виділяч = біб::отримати_системний_виділяч();

  ціль турбіна = турбо::створити_турбіну(виділяч);

  турбо::прочитати_ввід_ю8(турбіна, обробник_вводу, пусто, ю8"- ");

  ціль відкладене = турбо::відкласти_виконання(турбіна, 1000, обробник_відкладеного, пусто);
  якщо відкладене == пусто {
    турбо::вивести_ю8(турбіна, ю8"відкладення не вдалось\n");
  } інакше {
    турбо::вивести_ю8(турбіна, ю8"успішно відкладено\n");
  }

  змінна помилка_турбіни = турбо::ПомилкаВідкликуТурбіни { ... };

  турбо::запустити_турбіну(турбіна, пусто, пусто, пусто, помилка_турбіни::адреса);

  турбо::знищити_турбіну(турбіна);

  вернути 0;
}